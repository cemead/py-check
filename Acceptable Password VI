# this is based on a bunch of different exercises conglomerated
# it's not the prettiest code, but it does what is required by checkio

from collections import Counter

def is_acceptable_password(password: str) -> bool:
    # password should not contain the word "password" in any case
    if 'password' in password.lower():
        return False
    # should contain 3 different characters
    if len(Counter(password)) < 3:
        return False
    # length should be longer than 6
    # should contain at least one digit
    if (len(password) > 6) and (any(char.isdigit() for char in password)) == True:
        if (len(password) <= 9):
            # checking to make sure password doesn't contain only digits
            return not(password.isdigit())
        return True
    if (len(password) > 9):
        return True
    else:
        return False


if __name__ == '__main__':
    print("Example:")
    print(is_acceptable_password('short'))

    # These "asserts" are used for self-checking and not for an auto-testing
    assert is_acceptable_password('short') == False
    assert is_acceptable_password('short54') == True
    assert is_acceptable_password('muchlonger') == True
    assert is_acceptable_password('ashort') == False
    assert is_acceptable_password('muchlonger5') == True
    assert is_acceptable_password('sh5') == False
    assert is_acceptable_password('1234567') == False
    assert is_acceptable_password('12345678910') == True
    assert is_acceptable_password('password12345') == False
    assert is_acceptable_password('PASSWORD12345') == False
    assert is_acceptable_password('pass1234word') == True
    assert is_acceptable_password('aaaaaa1') == False
    assert is_acceptable_password('aaaaaabbbbb') == False
    assert is_acceptable_password('aaaaaabb1') == True
    assert is_acceptable_password('abc1') == False
    assert is_acceptable_password('abbcc12') == True
    print("Coding complete? Click 'Check' to earn cool rewards!")
